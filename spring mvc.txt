Model : 데이터를 처리하는 함수등이 구현되어있는부분
Controller : View의 요청을 받고 상황에 맞는 특정 모델을 구동시키는 것
View : 사용자에게 보여지는 부분

DispatcherServlet : 사용자 요청이 발생시 정보를 해석하고 개발자가 만든 코드를 동작시키는 첫번째 서블릿
spring MVC는 이것을 확대하여 spring framework가 가지고있는 기능을 사용할 수있도록 도와준다.

-----------------------------------------------------------------------------------------------------------------------------------------

1.pom.xml : 프로젝트 내부 빌드 옵션을 설정하는 부분이다(다른 프로젝트를 새롭게 만들떄도 복사-붙여넣기를 하면 되기때문에 협업할 때 버전을 통일하기 수월하다.)

1-1)
<properties>
		<javax.servlet-version>4.0.1</javax.servlet-version>
		<javax.servlet.jsp-version>2.3.3</javax.servlet.jsp-version>
		<javax.servlet.jsp.jstl-version>1.2</javax.servlet.jsp.jstl-version>
		<org.springframework-version>5.3.14</org.springframework-version>
</properties>
이부분은 라이브러리의 버전을 관리하는 부분이다
mvnrepository에 접속하여 servlet, servlet.jsp 등의 라이브러리를 복사하여 가져온다

1-2)
<dependencies>
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${javax.servlet-version}</version>
			<scope>provided</scope>
		</dependency>
		
</dependencies>
이부분은 라이브러리의 세팅을 관리해주는 역활을한다
버전, 그룹아이디, 아티팩트아이디 등이 포함된다.

-----------------------------------------------------------------------------------------------------------------------------------------

// Spring MVC 프로젝트에 관련된 설정을 하는 클래스
@Configuration
@EnableWebMvc
//스캔할 패키지를 지정한다.
@ComponentScan("kr.co.softcampus.controller")
public class ServletAppContext implements WebMvcConfigurer{
	// COntroller의 메서드가 반환하는 jsp의 이름 앞뒤에 경로와 확장자를 붙여주도록 설정하는부분
	@Override
	public void configureViewResolvers(ViewResolverRegistry registry) {
		// TODO Auto-generated method stub
		WebMvcConfigurer.super.configureViewResolvers(registry);
		registry.jsp("/WEB-INF/views/",".jsp");
		//↑controller패키지 안에 return 값으로 jsp의 이름을 반환하게 된다면 여기서 자동으로 앞에는 /WEB~ 이게 붙		  	  고 맨뒤에는 .jsp가 붙게된다. 좀 더 사용하기 편하게 하기위한 방법
			
	}
	// 정적 파일의 경로를 매핑한다.
	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		// TODO Auto-generated method stub
		WebMvcConfigurer.super.addResourceHandlers(registry);
		registry.addResourceHandler("/**").addResourceLocations("/resources/");
		// ↑ 모든경로에대해서 resources폴더에 있는것을 활용해라(ex) 이미지 같은 것)	
	}
}

-----------------------------------------------------------------------------------------------------------------------------------------

controller를 만들고 사용할 때 순서
1. controller 패키지를 만든다
2. 만든 클래스 내부에 @Controller를 써줘야 컨트롤러라고 인식하고 사용한다.

Controller를 사용할때 get방식과 post방식을 나누어 사용하는데
개인적인 아이디 비밀번호같은것이 url에 나타나면안되기 때문에 post방식을 사용한다
form을 사용하여 method를 결정하는데 그곳에서 post를 설정하고 이동이 되는 controller에 
@RequestMapping(value="/mine", method = RequestMethod.POST) 이렇게 설정한다.